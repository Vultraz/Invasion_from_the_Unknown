#textdomain wesnoth-Invasion_from_the_Unknown

#define BLACK_SCREEN
    [color_adjust]
        red,green,blue=-500,-500,-500
    [/color_adjust]
#enddef

#define WHITE_SCREEN
    [color_adjust]
        red,green,blue=500,500,500
    [/color_adjust]
#enddef

#define RED_SCREEN
    [color_adjust]
        red,green,blue=500,-500,-500
    [/color_adjust]
#enddef

#define RESET_SCREEN
    [color_adjust]
        red,green,blue=0,0,0
    [/color_adjust]
#enddef

#define COLOR_SHIFT V
    [color_adjust]
        red={V}
        green={V}
        blue={V}
    [/color_adjust]
#enddef

#define REVEAL X Y
    [remove_shroud]
        x={X}
        y={Y}
        side=1
    [/remove_shroud]

    {SCROLL_TO_LOCATION_AND_RETURN_TO_PRIMARY_UNIT {X} {Y} }
#enddef

#define REVEAL_AREA X1 Y1 X2 Y2
    # X0 = (X2 - X1) / 2 + X1 = X2 / 2 - X1 / 2 + X1 = X2 / 2 + -X1 / 2 + 2 X1 / 2 = X2 / 2 + X1 / 2
    # Y0 = (Y2 + Y1) / 2
    #
    # This should be little runtime load in terms of CPU time

    {VARIABLE     temp_REVEAL_AREA_center.x {X2} }
    {VARIABLE_ADD temp_REVEAL_AREA_center.x {X1} }
    {VARIABLE     temp_REVEAL_AREA_center.y {Y2} }
    {VARIABLE_ADD temp_REVEAL_AREA_center.y {Y1} }

    {VARIABLE_DIV temp_REVEAL_AREA_center.x 2}
    {VARIABLE_DIV temp_REVEAL_AREA_center.y 2}

    [remove_shroud]
        x={X1}-{X2}
        y={Y1}-{Y2}
        side=1
    [/remove_shroud]

    {SCROLL_TO_LOCATION_AND_RETURN_TO_PRIMARY_UNIT $temp_REVEAL_AREA_center.x $temp_REVEAL_AREA_center.y}

    {CLEAR_VARIABLE temp_REVEAL_AREA_center}
#enddef

# Fade out the screen, ending in a black surface
#define SCREEN_FADE_OUT _STEP
    [command]
        {VARIABLE     vidsurface_fxxor_i          0     }
        {VARIABLE     vidsurface_fxxor_cont       yes   }
        {VARIABLE     vidsurface_fxxor_stoprange -255   }
        {VARIABLE_ADD vidsurface_fxxor_stoprange {_STEP} }

        [while]
            {VARIABLE_NUMERICAL_GREATER_THAN vidsurface_fxxor_i -256}
            {VARIABLE_BOOLEAN_EQUALS vidsurface_fxxor_cont yes}
            [do]
                [color_adjust]
                    red,green,blue=$vidsurface_fxxor_i|,$vidsurface_fxxor_i|,$vidsurface_fxxor_i
                [/color_adjust]
                {VARIABLE_ADD vidsurface_fxxor_i -{_STEP} }
                [if]
                    {VARIABLE_NUMERICAL_LESS_THAN vidsurface_fxxor_i $vidsurface_fxxor_stoprange}
                    [then]
                        {VARIABLE vidsurface_fxxor_cont no}
                    [/then]
                [/if]
            [/do]
        [/while]
        [color_adjust]
            red,green,blue=-255,-255,-255
        [/color_adjust]
        {CLEAR_VARIABLE vidsurface_fxxor_i}
    [/command]
#enddef

# Fade in the screen, starting from a black surface
#define SCREEN_FADE_IN _STEP
    [command]
        {VARIABLE vidsurface_fxxor_i         -255    }
        {VARIABLE vidsurface_fxxor_cont       yes    }
        {VARIABLE vidsurface_fxxor_stoprange -{_STEP} }
        [while]
            {VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL vidsurface_fxxor_i 0}
            {VARIABLE_BOOLEAN_EQUALS vidsurface_fxxor_cont yes}
            [do]
                [color_adjust]
                    red,green,blue=$vidsurface_fxxor_i|,$vidsurface_fxxor_i|,$vidsurface_fxxor_i
                [/color_adjust]
                {VARIABLE_ADD vidsurface_fxxor_i {_STEP} }
                [if]
                    {VARIABLE_NUMERICAL_GREATER_THAN vidsurface_fxxor_i $vidsurface_fxxor_stoprange}
                    [then]
                        {VARIABLE vidsurface_fxxor_cont no}
                    [/then]
                [/if]
            [/do]
        [/while]
        [color_adjust]
            red,green,blue=0,0,0
        [/color_adjust]
        {CLEAR_VARIABLE vidsurface_fxxor_i}
    [/command]
#enddef

#define QUAKE_HEAVY _SOUND
    [quake_heavy]
        sound={_SOUND}
    [/quake_heavy]
#enddef

#define QUAKE_HEAVIER _SOUND
    [quake_heavier]
        sound={_SOUND}
    [/quake_heavier]
#enddef

#define HIGHLIGHT_GOAL _SLF
    [highlight_goal]
        {_SLF}
    [/highlight_goal]
#enddef

#define UNIT_SPELL_POPUP _SUF _TEXT
    [floating_text]
        [filter]
            {_SUF}
        [/filter]
        text="<span color='#7f7fff'>"+{_TEXT}+"</span>" # wmllint: ignore
    [/floating_text]
#enddef

#
# Place _NUM items on hexes matching _SLF, each a random image picked from
# _IMAGELIST. No collision checks are performed, so a single hex may wind up
# overlayed with multiple images.
#
#define SCATTER_RANDOM_IMAGE _SLF _NUM _IMAGELIST
    [scatter_images]
        {_SLF}
        image={_IMAGELIST}
        limit={_NUM}
    [/scatter_images]
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
