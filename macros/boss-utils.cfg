#textdomain wesnoth-Invasion_from_the_Unknown

#define BOSS_SCENARIO _EPISODE _LEVELNUM _TITLE
    id={_LEVELNUM}_E{_EPISODE}_Boss
    name={_TITLE}
    {MAP {_LEVELNUM}_E{_EPISODE}_Boss.map}
    turns=-1
    victory_when_enemies_defeated=no
    #theme=ShadowMaster_Boss_Area
#enddef

#define BOSS_SCENARIO_WITH_MUSIC _EPISODE _LEVELNUM _TITLE _MUSFILE
    id={_LEVELNUM}_E{_EPISODE}_Boss
    name={_TITLE}
    {MAP {_LEVELNUM}_E{_EPISODE}_Boss.map}
    turns=-1
    victory_when_enemies_defeated=no
    {SCENARIO_MUSIC {_MUSFILE} }
    #theme=ShadowMaster_Boss_Area
#enddef

# The pop-up message that appears when the players encounters
# an episode boss in the RPG scenarios. Made it a macro to keep it easier
# to modify across the entire campaign.
#define BOSS_POPUP
    [print]
        text= _ "Enemy boss sighted!"
        red,green,blue=255,127,0
        size=32
    [/print]
#enddef

#define BOSS_MUSIC
    [music]
        name=vengeful.ogg
        immediate=yes
        append=no
    [/music]
    [music]
        name=ambuscade.ogg
        immediate=yes
        play_once=yes
    [/music]
#enddef

#define BOSS_AMBIENTANCE
    {BOSS_MUSIC}

    {BOSS_POPUP}
#enddef

#define IS_BOSS
    overlays=misc/boss-icon.png
    random_traits=no
#enddef

# The following macro is used in gauntlet scenarios to store a list of units
# that are to be recalled (recall "meta list") in the following scenario, thus eliminating
# the need of role-conditionals and such in prestart events
# This macro is intended to be used in victory events
#define GAUNTLET_SAVE_RECALL_METALIST
    [store_unit_ids]
        [filter]
            side=1
            [filter_wml]
                [variables]
                    metarecall=yes
                [/variables]
            [/filter_wml]
            {EVERYWHERE} # on the map, not recall list.
            [not]
                id=Galas
            [/not]
            [not]
                id=Mal Keshar
            [/not]
            [not]
                id=Elynia
            [/not]
            [not]
                id=Erathan
            [/not]
            [not]
                id=Igor
            [/not]
            [not]
                id=Lédinor
            [/not]
        [/filter]
        variable=recall_metalist
    [/store_unit_ids]
#enddef

# Recalls unit from the recall-"metalist", by iterating over it and doing
# recall for each inner item. This metalist is nothing else than an array of
# $unit.id fields
# This macro is intended to be used after recalling all heroes in a prestart event
#define GAUNTLET_RECALL_METALIST
    [if]
        {VARIABLE_NUMERICAL_GREATER_THAN recall_metalist.length 0}
        [then]
            {FOREACH recall_metalist k}
                [recall]
                    id=$recall_metalist[$k].id
                    show=no
                [/recall]
            {NEXT k}
        [/then]
    [/if]

    # Clean up
    {CLEAR_VARIABLE recall_metalist}
#enddef

#define BOSS_OBJECTIVES_TO_WIN
    {OBJECTIVE_VICTORY ( _ "Defeat the enemy boss")}
#enddef

# wmlindent: start ignoring
#define BOSS_OBJECTIVES_FOOTNOTE
    _ "You may recruit or recall troops during the first turn only, until all your recruitment space is used. Your per-turn income is set to zero."#enddef
#define ENEMY_RESPAWNING_WARNING
    _ "Most enemies respawn two or more turns after you kill them, so try to get away from their initial locations as quickly as possible."#enddef
# wmlindent: stop ignoring

#define BOSS_SCENARIO_NOTE
    {OBJECTIVE_NOTE ( _ "You may recruit or recall troops during the first turn only, until all your recruitment space is used")}
    {OBJECTIVE_NOTE ( _ "Your income is disabled and you may not obtain gold from villages")}
#enddef

#define BOSS_UNIT_OVERLAY
    overlays=misc/boss-icon.png
#enddef

#define BOSS_BOOST _HITPOINTS_INCREASE _MELEE_DMG_INCREASE _MELEE_STRIKES_INCREASE _RANGED_DMG_INCREASE _RANGED_STRIKES_INCREASE
    [object]
        silent=yes
        [effect]
            apply_to=hitpoints
            increase_total={_HITPOINTS_INCREASE}
        [/effect]
        [effect]
            apply_to=attack
            range=melee
            increase_damage={_MELEE_DMG_INCREASE}
            increase_attacks={_MELEE_STRIKES_INCREASE}
        [/effect]
        [effect]
            apply_to=attack
            range=ranged
            increase_damage={_RANGED_DMG_INCREASE}
            increase_attacks={_RANGED_STRIKES_INCREASE}
        [/effect]
    [/object]
#enddef

# Spawn a boss unit with the required stats boost. Note that its level will always be increased
# one unit from the base level value
#
# Parameters description:
#   _TYPE: the unit type string
#   _ID: the unit's internal id
#   _UDESC: the unit's visible/translatable name
#   _SIDE: the side number to which this unit pertains
#   _X, _Y: 2D coordinates of the unit's initial location on map
#   _HITPOINTS_BOOST: boost value of the boss' hitpoints; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _MELEE_BOOST: boost value of the boss' melee damage per strike; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _MELEE_SBOOST: boost value of the boss' melee strikes number; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _RANGED_BOOST: boost value of the boss' ranged damage per strike; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _RANGED_SBOOST: boost value of the boss' ranged strikes number; might be a percentage ("n%"), a number ("[+/-]n·), or nil (""
#
#define SPAWN_BOSS_UNIT _TYPE _ID _UDESC _SIDE _X _Y _HITPOINTS_BOOST _MELEE_BOOST _MELEE_SBOOST _RANGED_BOOST _RANGED_SBOOST
    [unit]
        side={_SIDE}
        type={_TYPE}
        id={_ID}
        canrecruit=yes
        name={_UDESC}
        x={_X}
        y={_Y}
        {BOSS_UNIT_OVERLAY}
        random_traits=no
        unrenamable=yes
        [modifications]
            [trait]
                id=boss_stats_boost
                [effect]
                    apply_to=hitpoints
                    increase_total={_HITPOINTS_BOOST}
                [/effect]
                [effect]
                    apply_to=attack
                    range=melee
                    increase_damage={_MELEE_BOOST}
                    increase_attacks={_MELEE_SBOOST}
                [/effect]
                [effect]
                    apply_to=attack
                    range=ranged
                    increase_damage={_RANGED_BOOST}
                    increase_attacks={_RANGED_SBOOST}
                [/effect]
            [/trait]
        [/modifications]
        [variables]
            # RESERVED FOR FUTURE UTILITY FILTERS
            is_boss=yes
        [/variables]
    [/unit]
    # Changing level after spawning to avoid being overwritten by the unit_type object contents when
    # creating the unit from the [unit] tag
    [store_unit]
        [filter]
            id={_ID}
        [/filter]
        variable=boss_unit_store
    [/store_unit]
    {VARIABLE_INC boss_unit_store.level}
    [unstore_unit]
        find_vacant=no
        variable=boss_unit_store
    [/unstore_unit]
    {CLEAR_VARIABLE boss_unit_store}
#enddef

#define DEPLOY_PROVISIONAL_PLAYER_KEEP
    [store_starting_location]
        side=1
        variable=temp_DPPK_loc
    [/store_starting_location]

    [terrain]
        x=$temp_DPPK_loc.x
        y=$temp_DPPK_loc.y
        radius=1
        terrain=Ce
    [/terrain]

    [terrain]
        x=$temp_DPPK_loc.x
        y=$temp_DPPK_loc.y
        terrain=Ke
    [/terrain]

    {CLEAR_VARIABLE temp_DPPK_loc}
#enddef

#define REMOVE_PROVISIONAL_PLAYER_KEEP
    [store_starting_location]
        side=1
        variable=temp_RPPK_loc
    [/store_starting_location]

    [terrain]
        x=$temp_RPPK_loc.x
        y=$temp_RPPK_loc.y
        radius=1
        terrain=Re
    [/terrain]

    {CLEAR_VARIABLE temp_RPPK_loc}
#enddef

#define BOSS_SCENARIO_PLAYER_RECRUITMENT
    [event]
        name=prestart

        [modify_side]
            side=1
            {NO_INCOME}
            village_gold=0
        [/modify_side]

        {DEPLOY_PROVISIONAL_PLAYER_KEEP}
    [/event]

    # Facilities to set gold to 0 and disable recruiting on turn 2; after that, gold and
    # recruitment list are restored at victory event
    [event]
        name=turn 2

        [store_side]
            side=1
            variable=boss_side1_store
        [/store_side]

        {VARIABLE side1_restore_info.recruit $boss_side1_store.recruit}
        {VARIABLE side1_restore_info.gold $boss_side1_store.gold}

        [modify_side]
            side=1
            gold=0
        [/modify_side]

        {DISALLOW_RECRUIT 1 $side1_restore_info.recruit}

        {CLEAR_VARIABLE boss_side1_store}

        {REMOVE_PROVISIONAL_PLAYER_KEEP}
    [/event]

    [event]
        name=victory

        [modify_side]
            side=1
            recruit=$side1_restore_info.recruit
            gold=$side1_restore_info.gold
        [/modify_side]

        {CLEAR_VARIABLE side1_restore_info}

        # Restore non-loyaltiness
        [store_unit]
            [filter]
                side=1
                {NOT_ON_RECALL_LIST}
                [not]
                    canrecruit=yes
                [/not]
                [not]
                    id=Anlindë
                [/not]
                [not]
                    id=Mal Keshar
                [/not]
                [not]
                    id=Elynia
                [/not]
                [not]
                    id=Erathan
                [/not]
                [not]
                    id=Igor
                [/not]
                [not]
                    id=Lédinor
                [/not]
                [not]
                    id=Althurin
                [/not]
                [not]
                    id=King Asthorgar
                [/not]
            [/filter]
            kill=no
            variable=noloyalty_store
        [/store_unit]

        {FOREACH noloyalty_store k}
            {VARIABLE noloyalty_store[$k].upkeep $noloyalty_store[$k].variables.temp_boss_scenario_upkeep_former}

            {CLEAR_VARIABLE noloyalty_store[$k].variables.temp_boss_scenario_upkeep_former}

            [unstore_unit]
                variable=noloyalty_store[$k]
                find_vacant=no
            [/unstore_unit]
        {NEXT k}

        {CLEAR_VARIABLE noloyalty_store}
    [/event]

    # Make recalled and recruited units loyal for the remaining of this scenario
    [event]
        name=prerecruit
        first_time_only=no
        [filter]
            side=1
        [/filter]

        {VARIABLE unit.variables.temp_boss_scenario_upkeep_former $unit.upkeep}

        {VARIABLE unit.upkeep loyal}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]

    [event]
        name=prerecall
        first_time_only=no
        [filter]
            side=1
        [/filter]

        {VARIABLE unit.variables.temp_boss_scenario_upkeep_former $unit.upkeep}

        {VARIABLE unit.upkeep loyal}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define FINAL_SCENARIO_PLAYER_RECRUITMENT
    [event]
        name=prerecruit,prerecall
        first_time_only=no
        [filter]
            side=1
        [/filter]

        [fire_event]
            name=remove unit upkeep
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        name=post advance
        first_time_only=no
        [filter]
            side=1
            type=Soulless
        [/filter]

        [fire_event]
            name=remove unit upkeep
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        name=remove unit upkeep
        first_time_only=no

        # This never reverted later, so we don't need to rememver the
        # previous value.
        {VARIABLE unit.upkeep loyal}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define FINAL_SCENARIO_PLAYER_RECRUITMENT_WITH_AUTORECALL
    {FINAL_SCENARIO_PLAYER_RECRUITMENT}

    [event]
        name=prestart

        [recall_all]
            side=1
        [/recall_all]
    [/event]
#enddef

#define BOSS_IMMORTALITY _ID _COND _REPLENISH_PERCENTAGE
    [event]
        id=boss_immortality_handler
        name=last breath
        first_time_only=no
        [filter]
            id={_ID}
        [/filter]
        [filter_second_attack]
            [not]
                name=union
            [/not]
        [/filter_second_attack]
        [filter_condition]
            {_COND}
        [/filter_condition]

        {VARIABLE temp_FBI_old_hp $unit.hitpoints}

        {VARIABLE unit.hitpoints "$($unit.max_hitpoints * ("+{_REPLENISH_PERCENTAGE}+"/100.0))"}

        # Deduct the killing XP from the attacker.

        {LOG_IFTU_DBG "boss_immortality_handler: reset to "+{_REPLENISH_PERCENTAGE}+"% HP ($temp_FBI_old_hp -> $unit.hitpoints of $unit.max_hitpoints)"}
        {LOG_IFTU_DBG "boss_immortality_handler: deducting $(max([4, 8 * $unit.level])) XP from $second_unit.id"}

        {VARIABLE_MIN second_unit.experience "$(max([4, 8 * $unit.level]))"}

        [unstore_unit]
            variable=unit
            find_vacant=no
            {COLOR_HEAL}
            text=$temp_FBI_old_hp
        [/unstore_unit]

        [unstore_unit]
            variable=second_unit
            find_vacant=no
        [/unstore_unit]

        {CLEAR_VARIABLE temp_FBI_old_hp}

        [fire_event]
            name=boss revived
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
        [/fire_event]
    [/event]
#enddef

#define DISABLE_BOSS_IMMORTALITY
    [remove_event]
        id=boss_immortality_handler
    [/remove_event]
#enddef

# Helper macros to propagate the event context to chained events with
# [fire_event].
#define PROPAGATE_FULL_EVENT_CONTEXT
    [primary_unit]
        x,y=$x1,$y1
    [/primary_unit]
    [secondary_unit]
        x,y=$x2,$y2
    [/secondary_unit]
    [insert_tag]
        name=primary_attack
        variable=weapon
    [/insert_tag]
    [insert_tag]
        name=secondary_attack
        variable=second_weapon
    [/insert_tag]
#enddef

#define PROPAGATE_FULL_EVENT_CONTEXT_INVERTED
    [primary_unit]
        x,y=$x2,$y2
    [/primary_unit]
    [secondary_unit]
        x,y=$x1,$y1
    [/secondary_unit]
    [insert_tag]
        name=primary_attack
        variable=second_weapon
    [/insert_tag]
    [insert_tag]
        name=secondary_attack
        variable=weapon
    [/insert_tag]
#enddef

# NOTE: S23B uses an ad-hoc variant of this code. Keep an eye on that if any
#       changes or fixes are required here.
#define BOSS_ABSORB_FULL_DAMAGE_EX _ID _COND _FINAL_FILTERS
    [event]
        id=boss_absorbdmg_handler
        name=boss absorb damage
        first_time_only=no

        {_FINAL_FILTERS} # HACK

        [if]
            {VARIABLE_LEXICAL_NOT_EQUALS unit.gender female}
            [then]
                {VARIABLE temp_floattext ( _ "absorbed damage")}
            [/then]
            [else]
                {VARIABLE temp_floattext ( _ "female^absorbed damage")}
            [/else]
        [/if]

        [set_variables]
            name=unit
            mode=merge
            [value]
                hitpoints=$unit.max_hitpoints
                [status]
                    poisoned=no
                    slowed=no
                    petrified=no
                [/status]
            [/value]
        [/set_variables]

        [unstore_unit]
            find_vacant=no
            variable=unit
            {COLOR_HEAL}
            text=$temp_floattext # wmllint: ignore
        [/unstore_unit]

        {CLEAR_VARIABLE temp_floattext}
    [/event]

    [event]
        name=attacker hits
        first_time_only=no
        [filter_second]
            id={_ID}
        [/filter_second]
        [filter_condition]
            {_COND}
        [/filter_condition]

        [fire_event]
            name=boss absorb damage
            {PROPAGATE_FULL_EVENT_CONTEXT_INVERTED}
        [/fire_event]
    [/event]

    [event]
        name=defender hits
        first_time_only=no
        [filter]
            id={_ID}
        [/filter]
        [filter_condition]
            {_COND}
        [/filter_condition]

        [fire_event]
            name=boss absorb damage
            {PROPAGATE_FULL_EVENT_CONTEXT}
        [/fire_event]
    [/event]
#enddef

#define BOSS_ABSORB_FULL_DAMAGE _ID _COND
    {BOSS_ABSORB_FULL_DAMAGE_EX ({_ID}) ({_COND}) ()}
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
