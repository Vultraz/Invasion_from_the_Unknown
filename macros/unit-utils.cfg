#textdomain wesnoth-Invasion_from_the_Unknown

#define NO_UPKEEP_NO_OVERLAY
    [+unit]
        # dammit, esr
        upkeep=loyal
    [/unit]
#enddef

#define GENDER _GENDER
    [+unit]
        gender={_GENDER}
    [/unit]
#enddef

#define PLACEMENT _PLACEMENT
    [+unit]
        placement={_PLACEMENT}
    [/unit]
#enddef

#define PALETTE _SRC _DEST
    [+unit]
        [+modifications]
            [object]
                [effect]
                    apply_to="image_mod"
                    add="PAL("+{_SRC}+">"+{_DEST}+")"
                [/effect]
            [/object]
        [/modifications]
    [/unit]
#enddef

#define FAKE_RECRUIT _SIDE _TYPE _X _Y
    [unit]
        side={_SIDE}
        type={_TYPE}
        x={_X}
        y={_Y}
        random_gender=yes
        random_traits=yes
        generate_name=yes
        moves=0
        attacks_left=0
        animate=yes
    [/unit]
#enddef

# Macros PLACE_UNITS_RANDOMLY, RANDOM_PLACEMENT_AREA, CLEAR_PLACEMENT_AREA, RANDOM_PLACEMENT
# were written by Rhuvaen for UtBS (1.3.x), and directly copied with minor modifications
#
# Many macros were written by Shadow Master on 2006, others were on 2007-2008
# wmllint: validate-off
# wmllint: unbalanced-on
# wmlindent: start ignoring
#define DIRECTION_ALL
n,s,ne,nw,se,sw#enddef
# wmlindent: stop ignoring

# VARIATION: one of "",drake,swimmer,troll,wose,saurian,mounted,dwarf,bat,gryphon
#define ANONYMOUS_WC_GUARD VARIATION SIDE X Y
    [unit]
        type=Walking Corpse
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
        variation={VARIATION}
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define ANONYMOUS_SOULLESS_GUARD VARIATION SIDE X Y
    [unit]
        type=Soulless
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
        variation={VARIATION}
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define GENERIC_GUARDIAN_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_name=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef

#define GENERIC_UNIT_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef

#define ANONYMOUS_UNIT TYPE SIDE X Y
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        upkeep=loyal
    [/unit]
#enddef

#define ANONYMOUS_GUARD TYPE SIDE X Y
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
    [/unit]
#enddef

#define ANONYMOUS_MAKE_UNDEAD
    [+unit]
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define ANONYMOUS_MAKE_MECHANICAL
    [+unit]
        [modifications]
            {TRAIT_MECHANICAL}
        [/modifications]
    [/unit]
#enddef

#define FACE_DIRECTION _SUF _DIRECTION
    [set_facing]
        [filter]
            {_SUF}
        [/filter]
        facing={_DIRECTION}
    [/set_facing]
#enddef

#define FACE_LOCATION _SUF _TARGET_SLF
    [set_facing]
        [filter]
            {_SUF}
        [/filter]
        [filter_location]
            {_TARGET_SLF}
        [/filter_location]
    [/set_facing]
#enddef

#define FACE_UNIT _SUF _TARGET_SUF
    [set_facing]
        [filter]
            {_SUF}
        [/filter]
        [filter_second]
            {_TARGET_SUF}
        [/filter_second]
    [/set_facing]
#enddef

#define RANDOM_PLACEMENT_AREA _SLF
    # set a placement area for subsequent random placement of units
    [store_locations]
        variable=temp_PUR_locs
        {_SLF}
    [/store_locations]
#enddef

#define PLACE_UNITS_RANDOMLY _TYPE _SIDE _NUM _UNIT_WML
    {REPEAT {_NUM} (
        {VARIABLE_RANDOM temp_PUR_n "0..$($temp_PUR_locs.length - 1)"}

        [unit]
            side={_SIDE}
            type={_TYPE}
            x,y=$temp_PUR_locs[$temp_PUR_n].x,$temp_PUR_locs[$temp_PUR_n].y

            random_gender=yes
            random_traits=yes
            generate_name=yes
            upkeep=full
            animate=yes

            {_UNIT_WML}
        [/unit]

        {CLEAR_VARIABLE temp_PUR_n}
    )}
#enddef

#define CLEAR_PLACEMENT_AREA
    {CLEAR_VARIABLE temp_PUR_locs}
#enddef

#define ROLE _ROLE_TAG _SUF
    [role]
        role={_ROLE_TAG}
        {_SUF}
    [/role]
    [if]
        [not]
            [have_unit]
                {NOT_ON_RECALL_LIST}
                role={_ROLE_TAG}
            [/have_unit]
        [/not]
        [then]
            {RECALL_SUF (role={_ROLE_TAG})}
        [/then]
    [/if]
#enddef

#define REMOVE_ROLE _ROLE_TAG
    [store_unit]
        [filter]
            role={_ROLE_TAG}
        [/filter]
        variable=_varMT_unit_REMOVE_ROLE
    [/store_unit]
    {FOREACH _varMT_unit_REMOVE_ROLE i}
        {CLEAR_VARIABLE _varMT_unit_REMOVE_ROLE[$i].role}
        [unstore_unit]
            variable=_varMT_unit_REMOVE_ROLE[$i]
            find_vacant=no
        [/unstore_unit]
    {NEXT i}
#enddef

# UTILITY MACROS THAT ARE SPECIFIC TO THE BIOMECHANICAL UNITS

#define SHAXTHAL_SET_SURFACE_VARIATIONS_FLAG
    [event]
        name=prestart
        {VARIABLE __uu_shaxthal_in_surface yes}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE __uu_shaxthal_in_surface}
    [/event]
#enddef

#define SHAXTHAL_ONRECRUIT_CHECK_SURFACE_FLAG _TYPE_SELF
    [event]
        name=prerecruit
        first_time_only=no
        [filter]
            type={_TYPE_SELF}
        [/filter]
        [filter_condition]
            {VARIABLE_BOOLEAN_EQUALS __uu_shaxthal_in_surface yes}
        [/filter_condition]

        [object]
            silent=yes
            [filter]
                x=$x1
                y=$y1
            [/filter]
            [effect]
                apply_to=variation
                name=surface
            [/effect]
        [/object]
    [/event]
#enddef

#define SHAXTHAL_SURFACE_VARIATION
    variation=surface
#enddef

#define SHAXTHAL_MAKE_SURFACE_VARIATION
    [+unit]
        {SHAXTHAL_SURFACE_VARIATION}
    [/unit]
#enddef

# wmllint: unbalanced-off
# wmllint: validate-on

#define ELVISH_SUPPORTER_ROLE ROLE
    [role]
        role={ROLE}
        type=Elvish Sylph,Elvish Shyde,Elvish Avenger,Elvish Sharpshooter,Elvish Enchantress,Elvish Champion,Elvish Marshal,Elvish Outrider,Elvish Ranger,Elvish Marksman,Elvish Sorceress,Elvish Hero,Elvish Captain,Elvish Druid,Elvish Rider,Elvish Archer,Elvish Fighter,Elvish Shaman,Elvish Civilian,Elvish Prowler,Elvish Trapper,Elvish Hunter # (ordered according to portraits)
        side=1
        [not]
            id=AnlindÃ«,Galas
        [/not]
    [/role]
#enddef

#
# Tries to find a suitable elvish supporter for
# recall; if that fails, it creates them. This ensures
# dialogues can go on.
#
#define ELVISH_SUPPORTER R_ID
    [if]
        [not]
            [have_unit]
                role={R_ID}
                side=1
            [/have_unit]
        [/not]
        [then]
            {ELVISH_SUPPORTER_ROLE ({R_ID})}

            [recall]
                role={R_ID}
            [/recall]

            [if]
                [not]
                    [have_unit]
                        role={R_ID}
                        side=1
                    [/have_unit]
                [/not]
                [then]
                    {VARIABLE_RANDOM temp_ELVISH_SUPPORTER_type "Archer,Fighter,Hunter,Shaman,Scout,Civilian"}

                    [unit]
                        role={R_ID}
                        type="Elvish $temp_ELVISH_SUPPORTER_type"
                        side=1
                        placement=leader
                        generate_name=yes
                        random_gender=yes
                        random_traits=yes
                    [/unit]

                    {CLEAR_VARIABLE temp_ELVISH_SUPPORTER_type}
                [/then]
            [/if]
        [/then]
    [/if]
#enddef

#define UNIT_PALETTE_SWITCH _SUF _FROM _TO
    [object]
        silent=yes
        [filter]
            {_SUF}
        [/filter]
        [effect]
            apply_to=image_mod
            add="PAL("+{_FROM}+">"+{_TO}+")"
        [/effect]
    [/object]
#enddef

#define MOBILIZE_GUARDIANS _SUF
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_MOBILIZE_GUARDIANS_store
    [/store_unit]

    {FOREACH temp_MOBILIZE_GUARDIANS_store temp_MOBILIZE_GUARDIANS_i}
        {CLEAR_VARIABLE "temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i].status.guardian,temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i].ai_special"}
        [unstore_unit]
            variable="temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i]"
            find_vacant=no
        [/unstore_unit]
    {NEXT temp_MOBILIZE_GUARDIANS_i}

    {CLEAR_VARIABLE "temp_MOBILIZE_GUARDIANS_store"}
#enddef

# An alternative to the mainline PUT_TO_RECALL_LIST macro that actually resets
# the affected units' stats before storing in the recall list so they don't
# appear funny the next time they are recalled by the player.
#define RESET_AND_SEND_TO_RECALL_LIST _SUF
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_RESET_AND_SEND_TO_RECALL_LIST_store
        kill=yes
    [/store_unit]

    {FOREACH temp_RESET_AND_SEND_TO_RECALL_LIST_store temp_RESET_AND_SEND_TO_RECALL_LIST_k}
        # Use a pseudoreference so this doesn't become illegibly long.
        {VARIABLE temp_RESET_AND_SEND_TO_RECALL_LIST_var "temp_RESET_AND_SEND_TO_RECALL_LIST_store[$temp_RESET_AND_SEND_TO_RECALL_LIST_k]"}

        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.uncovered}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.poisoned}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.slowed}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.petrified}

        [set_variables]
            name=$temp_RESET_AND_SEND_TO_RECALL_LIST_var
            mode=merge
            [value]
                hitpoints=$$temp_RESET_AND_SEND_TO_RECALL_LIST_var|.max_hitpoints
                moves=0
                attacks_left=0
            [/value]
        [/set_variables]

        [unstore_unit]
            find_vacant=no
            variable=$temp_RESET_AND_SEND_TO_RECALL_LIST_var
            x,y=recall,recall
        [/unstore_unit]
    {NEXT temp_RESET_AND_SEND_TO_RECALL_LIST_k}

    {CLEAR_VARIABLE temp_RESET_AND_SEND_TO_RECALL_LIST_store,temp_RESET_AND_SEND_TO_RECALL_LIST_var}
#enddef

#define ATTACH_EVENTS_TO_UNIT _SUF _EVENTS
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_AETU_store
    [/store_unit]

    [set_variables]
        name=temp_AETU_store_events
        [literal]
            {_EVENTS}
        [/literal]
    [/set_variables]

    [set_variables]
        name=temp_AETU_store.event
        mode=append
        to_variable=temp_AETU_store_events.event
    [/set_variables]

    [unstore_unit]
        variable=temp_AETU_store
        find_vacant=no
    [/unstore_unit]

    {CLEAR_VARIABLE temp_AETU_store,temp_AETU_store_events}
#enddef

#
# Abort an attack sequence by temporarily removing the second unit from the
# map. This is meant to be used in an 'attack' event handler.
#
#define ABORT_ATTACK
    [set_variables]
        name=temp_ABORT_ATTACK_unit
        mode=replace
        to_variable=second_unit
    [/set_variables]

    [kill]
        x,y=$x2,$y2
    [/kill]

    [event]
        name=attack end

        {VARIABLE_INC unit.attacks_left}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]

        [unstore_unit]
            variable=temp_ABORT_ATTACK_unit
            find_vacant=no
        [/unstore_unit]

        {CLEAR_VARIABLE temp_ABORT_ATTACK_unit}
    [/event]
#enddef

#define UNPETRIFY_UNITS_AT_TURN_START _SIDE _ADJACENT_TO_SUF
    [event]
        name="side "+{_SIDE}+" turn refresh"
        first_time_only=no

        [store_unit]
            [filter]
                side={_SIDE}
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
                [filter_adjacent]
                    {_ADJACENT_TO_SUF}
                [/filter_adjacent]
            [/filter]
            variable=petrified_units
        [/store_unit]

        {FOREACH petrified_units k}
            {CLEAR_VARIABLE petrified_units[$k].status.petrified}

            [if]
                {VARIABLE_LEXICAL_EQUALS petrified_units[$k].gender female}
                [then]
                    {VARIABLE temp_text ( _ "female^unpetrified")}
                [/then]
                [else]
                    {VARIABLE temp_text ( _ "unpetrified")}
                [/else]
            [/if]

            [unstore_unit]
                variable=petrified_units[$k]
                find_vacant=no
                text=$temp_text
                {COLOR_HEAL}
            [/unstore_unit]
        {NEXT k}

        {CLEAR_VARIABLE petrified_units,temp_text}
    [/event]
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
